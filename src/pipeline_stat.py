import os,sys,glob
import logging
from pathlib import Path
import pandas as pd
import numpy as np

from src import preprocess_pipeline_stat 
from src import pe2csv

import pickle

FOLDER_ROOT = Path(os.path.dirname(os.path.abspath(__file__))).parent.absolute()
logger = logging.getLogger(__name__)
c_handler = logging.StreamHandler()
f_handler = logging.FileHandler(os.path.join(FOLDER_ROOT,'logs','pipeline_stat_log'))
c_handler.setLevel(logging.WARNING)
f_handler.setLevel(logging.ERROR)
c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)
logger.addHandler(c_handler)
logger.addHandler(f_handler)


class Model():
    __model__ = None
    def __init__(self,model_checkpoints):
        if Model.__model__ is None:
            Model.__model__ = self.load_checkpoint(model_checkpoints)
        else:
            logger.warning("Don't try load model again")
        self.feature_selection = [
            'Machine', 'SizeOfOptionalHeader', 'Characteristics',
               'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode',
               'SizeOfInitializedData', 'SizeOfUninitializedData',
               'AddressOfEntryPoint', 'BaseOfCode', 'BaseOfData', 'ImageBase',
               'SectionAlignment', 'FileAlignment', 'MajorOperatingSystemVersion',
               'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion',
               'MajorSubsystemVersion', 'MinorSubsystemVersion', 'SizeOfImage',
               'SizeOfHeaders', 'CheckSum', 'Subsystem', 'DllCharacteristics',
               'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve',
               'SizeOfHeapCommit', 'LoaderFlags', 'NumberOfRvaAndSizes', 'SectionsNb',
               'SectionsMeanEntropy', 'SectionsMinEntropy', 'SectionsMaxEntropy',
               'SectionsMeanRawsize', 'SectionsMinRawsize', 'SectionMaxRawsize',
               'SectionsMeanVirtualsize', 'SectionsMinVirtualsize',
               'SectionMaxVirtualsize', 'ImportsNbDLL', 'ImportsNb',
               'ImportsNbOrdinal', 'ExportNb', 'ResourcesNb', 'ResourcesMeanEntropy',
               'ResourcesMinEntropy', 'ResourcesMaxEntropy', 'ResourcesMeanSize',
               'ResourcesMinSize', 'ResourcesMaxSize', 'LoadConfigurationSize',
               'VersionInformationSize', ]
    def load_checkpoint(self, fpath):
        
        path_model = os.path.join(fpath,'rf_model2.pkl')
        
        path_transform = os.path.join(fpath,'transform.pkl')
        
        model = pickle.load(open(path_model, 'rb'))
        transforms = pickle.load(open(path_transform, 'rb'))
        
        return (model,transforms)
        
        
    def predict_from_path(self, fpath ):
        if self.__model__ is None:
            logger.error("load model before predict")
        stat_from_pe = pe2csv.extract_infos(fpath)
        data_test = {}
        data_test[0] = {k:v for k,v in zip(pe2csv.FEATURE,stat_from_pe)}
        
        test = pd.DataFrame(data_test).transpose()[self.feature_selection]
#         print(test)
#         x=preprocess_pipeline_stat.transform_data(test, Model.__model__[1])
#         print(x)
        x=np.nan_to_num(test.values)
        y_pred = self.__model__[0].predict(x).tolist()[0]
#         print(y_pred)
        if y_pred == 0:
            ans ='MALWARE'
        else: 
            ans = 'NO_MALWARE'
        return {
            'y_pred':y_pred,
            'values':ans
        }
        
        
    def predict_from_pandas(self, pd_data):
        if self.__model__ is None:
            logger.error("load model before predict")
        test = pd_data[self.feature_selection]
        x=preprocess_pipeline_stat.transform_data(test, self.__model__[1])
        
        y_pred = Model.__model__[0].predict(x).tolist()[0]
        if y_pred == 0:
            ans ='MALWARE'
        else: 
            ans = 'NO_MALWARE'
        return {
            'y_pred':y_pred,
            'values':ans
        }

    

